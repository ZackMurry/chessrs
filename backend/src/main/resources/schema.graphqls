type Move {
    id: String!
    userId: String!
    fenBefore: String!
    san: String!
    uci: String!
    fenAfter: String!
    isWhite: Boolean!
    lastReviewed: String!
    timeCreated: String!
    numReviews: Int!,
    due: String!
    opening: String!
}

type UserPerf {
  games: Int!
  rating: Int!
  rd: Int!
  prog: Int!
  prov: Boolean
}

type UserRacer {
  runs: Int!
  score: Int!
}

type Perfs {
  chess960: UserPerf!
  antichess: UserPerf!
  puzzle: UserPerf!
  atomic: UserPerf!
  blitz: UserPerf!
  crazyhouse: UserPerf!
  threeCheck: UserPerf!
  bullet: UserPerf!
  correspondence: UserPerf!
  classical: UserPerf!
  rapid: UserPerf!
  storm: UserRacer!
  racer: UserRacer!
  streak: UserRacer!
}

type PlayTime {
  total: Int!
  tv: Int!
}

type Attributes {
  id: String!
  username: String!
  online: Boolean!
  perfs: Perfs!
  createdAt: String!
  seenAt: String!
  playTime: PlayTime!
  language: String!
  url: String!
  nbFollowing: Int!
  nbFollowers: Int!
  completionRate: Int!
  followable: Boolean!
  following: Boolean!
  blocking: Boolean!
  followsYou: Boolean!
}

type Authority {
  authority: String!
}

type Account {
  username: String!
  id: String!
  authorities: [Authority]!
  attributes: Attributes!
  easeFactor: Float!
  enabled: Boolean!
  accountNonLocked: Boolean!
  accountNonExpired: Boolean!
  credentialsNonExpired: Boolean!
  name: String!
}


type Query {
    move(id: String, fenBefore: String): Move
    dueMoves(limit: Int): [Move]!
    numberOfDueMoves: Int!
    randomMoves(limit: Int): [Move]!
    account: Account!
}

type Mutation {
    createMove(fenBefore: String!, san: String!, uci: String!, fenAfter: String!, isWhite: Boolean!, opening: String!): Move
    reviewMove(id: String!, success: Boolean!): Move!
    deleteMove(id: String!): Move!
}
