scalar Long

type Move {
    id: String!
    userId: String!
    fenBefore: String!
    san: String!
    uci: String!
    isWhite: Boolean!
    lastReviewed: String!
    timeCreated: String!
    numReviews: Int!,
    due: String!
    opening: String!
    cleanFen: String!
}

type UserPerf {
    games: Int!
    rating: Int!
    rd: Int!
    prog: Int!
    prov: Boolean
}

type UserRacer {
    runs: Int!
    score: Int!
}

type Perfs {
    chess960: UserPerf!
    antichess: UserPerf!
    puzzle: UserPerf!
    atomic: UserPerf!
    blitz: UserPerf!
    crazyhouse: UserPerf!
    threeCheck: UserPerf!
    bullet: UserPerf!
    correspondence: UserPerf!
    classical: UserPerf!
    rapid: UserPerf!
    storm: UserRacer!
    racer: UserRacer!
    streak: UserRacer!
}

type PlayTime {
    total: Int!
    tv: Int!
}

type Attributes {
    id: String!
    username: String!
    online: Boolean!
    perfs: Perfs!
    createdAt: String!
    seenAt: String!
    playTime: PlayTime!
    language: String!
    url: String!
    nbFollowing: Int!
    nbFollowers: Int!
    completionRate: Int!
    followable: Boolean!
    following: Boolean!
    blocking: Boolean!
    followsYou: Boolean!
}

type Authority {
    authority: String!
}

type Account {
    username: String!
    id: String!
    authorities: [Authority]!
    attributes: Attributes!
    easeFactor: Float!
    scalingFactor: Float!
    enabled: Boolean!
    accountNonLocked: Boolean!
    accountNonExpired: Boolean!
    credentialsNonExpired: Boolean!
    name: String!
}

type LichessOpening {
    eco: String
    name: String
}

type LichessMove {
    uci: String!
    san: String!
    averageRating: Int
    white: Long
    draws: Long
    black: Long
    opening: LichessOpening
}

type LichessExplorerResponse {
    white: Long!
    draws: Long!
    black: Long!
    moves: [LichessMove!]
    opening: LichessOpening
}

type EngineAnalysisResult {
    fen: String!
    depth: Int!
    eval: Float
    mate: Int
    mainLine: String
    provider: String!
}

type Query {
    move(id: String, fenBefore: String): Move
    dueMoves(limit: Int): [Move]!
    numberOfDueMoves: Int!
    randomMoves(limit: Int): [Move]!
    account: Account!
    moves(page: Int, limit: Int): [Move]!
    numberOfMoves: Int!
    positionInformation(fen: String): LichessExplorerResponse!
    engineAnalysis(fen: String): EngineAnalysisResult!
}

type Mutation {
    createMove(fenBefore: String!, san: String!, uci: String!, opening: String!): Move
    reviewMove(id: String!, success: Boolean!): Move!
    deleteMove(id: String!): Move!
    updateSettings(easeFactor: Float, scalingFactor: Float): Account!
    deleteAccount: Account!
}
